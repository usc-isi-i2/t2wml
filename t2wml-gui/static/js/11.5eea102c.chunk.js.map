{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","@keywords","@default","object","array","multiString","multiStringContinued","$1==$S2","next","whitespace","comment","flowCollections","flowScalars","doubleQuotedString","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAAO,IAAAD,EAAA,CACPE,SAAA,CACAC,YAAA,KAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAC,iBAAA,EACAF,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAE,QAAA,CACAC,SAAA,IAGOT,EAAA,CACPU,aAAA,QACAP,SAAA,EACAQ,MAAA,oBACAN,KAAA,IACAC,MAAA,KACG,CACHK,MAAA,mBACAN,KAAA,IACAC,MAAA,MAEAM,SAAA,wEACAC,cAAA,oBACAC,YAAA,sDACAC,YAAA,WACAC,UAAA,iBACAC,eAAA,yBACAC,UAAA,oBACAC,WAAA,0EACAC,QAAA,8CACAC,UAAA,CACAC,KAAA,EACAC,QAAA,eACK,CACLA,QAAA,YAEA,+BACA,2CAA+C,yBAC/C,4BACAA,QAAA,WACK,CACLA,QAAA,cACK,CACLA,QAAA,oBACK,CACLA,QAAA,eAEA,mTACA,4EACAA,QAAA,gBAEA,QACAC,MAAA,CACAC,YAAA,UACAC,WAAA,aAIAC,OAAA,EACAJ,QAAA,eACK,CACLA,QAAA,YAEA,MAAQ,oBACR,wBACA,uBACA,oCAA0B,QAC1B,CACAA,QAAA,oBACK,CACLA,QAAA,gBAEA,CACAA,QAAA,cACK,CACLA,QAAA,WACK,CACLA,QAAA,eAEA,WAAU,CACVC,MAAA,CACAC,YAAA,UACAC,WAAA,aAIAE,MAAA,EACAL,QAAA,eACK,CACLA,QAAA,YAEA,0BACA,wBACA,CACAA,QAAA,oBACK,CACLA,QAAA,gBAEA,CACAA,QAAA,cACK,CACLA,QAAA,WACK,CACLA,QAAA,eAEA,YACAC,MAAA,CACAC,YAAA,UACAC,WAAA,aAIAG,YAAA,mDAGAC,qBAAA,cACAN,MAAA,CACAO,UAAA,SACAL,WAAA,CACAf,MAAA,WACAqB,KAAA,eAIAC,WAAA,yBAEAC,QAAA,qBAEAC,gBAAA,mCAAyD,wBAEzDC,YAAA,sIACAC,mBAAA,0GAEAC,WAAA,kDAEAC,WAAA,oCAAgD,2CAA6C,iDAAmD,+CAAiD,kDAAoD,kDAAoD,8CAAgD,gBACzVC,UAAA,oBACAC,OAAA","file":"static/js/11.5eea102c.chunk.js","sourcesContent":["export var conf = {\n  comments: {\n    lineComment: '#'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    offSide: true\n  }\n};\nexport var language = {\n  tokenPostfix: '.yaml',\n  brackets: [{\n    token: 'delimiter.bracket',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.square',\n    open: '[',\n    close: ']'\n  }],\n  keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n  numberInteger: /(?:0|[+-]?[0-9]+)/,\n  numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n  numberOctal: /0o[0-7]+/,\n  numberHex: /0x[0-9a-fA-F]+/,\n  numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n  numberNaN: /\\.(?:nan|Nan|NAN)/,\n  numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n  escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Directive\n    [/%[^ ]+.*$/, 'meta.directive'], // Document Markers\n    [/---/, 'operators.directivesEnd'], [/\\.{3}/, 'operators.documentEnd'], // Block Structure Indicators\n    [/[-?:](?= )/, 'operators'], {\n      include: '@anchor'\n    }, {\n      include: '@tagHandle'\n    }, {\n      include: '@flowCollections'\n    }, {\n      include: '@blockStyle'\n    }, // Numbers\n    [/@numberInteger(?![ \\t]*\\S+)/, 'number'], [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'], [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'], [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'], [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'], [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'], [/@numberDate(?![ \\t]*\\S+)/, 'number.date'], // Key:Value pair\n    [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']], {\n      include: '@flowScalars'\n    }, // String nodes\n    [/.+$/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // Flow Collection: Flow Mapping\n    object: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Flow Mapping termination\n    [/\\}/, '@brackets', '@pop'], // Flow Mapping delimiter\n    [/,/, 'delimiter.comma'], // Flow Mapping Key:Value delimiter\n    [/:(?= )/, 'operators'], // Flow Mapping Key:Value key\n    [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'], // Start Flow Style\n    {\n      include: '@flowCollections'\n    }, {\n      include: '@flowScalars'\n    }, // Scalar Data types\n    {\n      include: '@tagHandle'\n    }, {\n      include: '@anchor'\n    }, {\n      include: '@flowNumber'\n    }, // Other value (keyword or string)\n    [/[^\\},]+/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // Flow Collection: Flow Sequence\n    array: [{\n      include: '@whitespace'\n    }, {\n      include: '@comment'\n    }, // Flow Sequence termination\n    [/\\]/, '@brackets', '@pop'], // Flow Sequence delimiter\n    [/,/, 'delimiter.comma'], // Start Flow Style\n    {\n      include: '@flowCollections'\n    }, {\n      include: '@flowScalars'\n    }, // Scalar Data types\n    {\n      include: '@tagHandle'\n    }, {\n      include: '@anchor'\n    }, {\n      include: '@flowNumber'\n    }, // Other value (keyword or string)\n    [/[^\\],]+/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'string'\n      }\n    }]],\n    // First line of a Block Style\n    multiString: [[/^( +).+$/, 'string', '@multiStringContinued.$1']],\n    // Further lines of a Block Style\n    //   Workaround for indentation detection\n    multiStringContinued: [[/^( *).+$/, {\n      cases: {\n        '$1==$S2': 'string',\n        '@default': {\n          token: '@rematch',\n          next: '@popall'\n        }\n      }\n    }]],\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n    // Only line comments\n    comment: [[/#.*$/, 'comment']],\n    // Start Flow Collections\n    flowCollections: [[/\\[/, '@brackets', '@array'], [/\\{/, '@brackets', '@object']],\n    // Start Flow Scalars (quoted strings)\n    flowScalars: [[/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], [/'[^']*'/, 'string'], [/\"/, 'string', '@doubleQuotedString']],\n    doubleQuotedString: [[/[^\\\\\"]+/, 'string'], [/@escapes/, 'string.escape'], [/\\\\./, 'string.escape.invalid'], [/\"/, 'string', '@pop']],\n    // Start Block Scalar\n    blockStyle: [[/[>|][0-9]*[+-]?$/, 'operators', '@multiString']],\n    // Numbers in Flow Collections (terminate with ,]})\n    flowNumber: [[/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'], [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'], [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'], [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'], [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'], [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'], [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']],\n    tagHandle: [[/\\![^ ]*/, 'tag']],\n    anchor: [[/[&*][^ ]+/, 'namespace']]\n  }\n};"],"sourceRoot":""}